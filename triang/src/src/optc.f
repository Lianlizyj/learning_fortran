C******* -SUBROUTINE OPTC- *********************************************
C----
C---- THIS SUBROUTINE CALCULATES THE BEST POSITION FOR A NEW GRID POINT
C----

      SUBROUTINE OPTC
      use cpoin
      use creg
      use cdelta
      IMPLICIT NONE

C---- LOCAL VARIABLES
C---- A        : MATRIX FOR ROTATION
C---- VECAB    : VECTOR FROM XA TO XB
C---- PERPEN   : PERPENDICULAR VECTOR TO VECTOR VECAB IN
C                POSITIV MATEMATICAL SENSE OF ROTATION WITH LENGTH
C                DELBAS
C---- MC       : HEIGHT FOR THE NEW TRIANGLE
C---- DIST     : FUNCTION FOR CALCULATING THE DISTANCE BETWEEN TWO
C----            POINTS
      INTEGER IREG
      DOUBLE PRECISION A(2,2),VECAB(2),PERPEN(2),MC,DIST

C---- INITIALIZE THE MATRIX FOR ROTATION
      DATA A/0,-1,1,0/

C---- DELBAS IS THE LENGTH OF VECTOR FROM XA TO XB
      DELBAS = DIST(XA(1),XA(2),XB(1),XB(2))

C---- COMPUTING OF DELPOIN FOR HEIGHT OF TRIANGLE
      DELPOIN = 0.
      DO IREG = 1,NREG
        DELX = ABS(REGION(1,IREG)-REGION(3,IREG))
        DELY = ABS(REGION(2,IREG)-REGION(4,IREG))
        IF (((ABS(XA(1)-REGION(1,IREG)) .LE. DELX) .AND.
     .       (ABS(XA(1)-REGION(3,IREG)) .LE. DELX) .AND.
     .       (ABS(XA(2)-REGION(2,IREG)) .LE. DELY) .AND.
     .       (ABS(XA(2)-REGION(4,IREG)) .LE. DELY)) .OR.
     .      ((ABS(XB(1)-REGION(1,IREG)) .LE. DELX) .AND.
     .       (ABS(XB(1)-REGION(3,IREG)) .LE. DELX) .AND.
     .       (ABS(XB(2)-REGION(2,IREG)) .LE. DELY) .AND.
     .       (ABS(XB(2)-REGION(4,IREG)) .LE. DELY))) THEN
          DELPOIN = REGION(5,IREG)
        ENDIF
      ENDDO
      IF (ABS(DELPOIN) .LT. 1.E-6) DELPOIN = DELTA0

C---- CALCULATION OF DELTA2
C---- DEPENDING ON DELPOIN (SIDE LENGTH OF TRIANGLES AS WANTED IN THIS
C---- REGION) AND DELBAS (LENGTH OF VECTOR FROM XA TO XB)
      IF ((0.55*DELBAS .LE. DELPOIN) .AND. (DELPOIN .LE. 1.50*DELBAS))
     >   THEN
           DELTA2 = DELPOIN
      ELSEIF (0.55*DELBAS .GT. DELPOIN) THEN
        DELTA2 = 0.55*DELBAS
      ELSE
        DELTA2 = 1.50*DELBAS
      ENDIF

      MC = (SQRT((DELTA2)**2 - (DELBAS/2)**2))

      VECAB(1) = XB(1)- XA(1)
      VECAB(2) = XB(2)- XA(2)

C---- ROTATION OF VECTOR VECAB
      PERPEN(1) = A(1,1)*VECAB(1) + A(2,1)*VECAB(2)
      PERPEN(2) = A(1,2)*VECAB(1) + A(2,2)*VECAB(2)

C---- CALCULATION OF POINT C
      XC(1) = XA(1) + 0.5*VECAB(1) + MC * PERPEN(1)/DELBAS
      XC(2) = XA(2) + 0.5*VECAB(2) + MC * PERPEN(2)/DELBAS

      IC = NPOIN+1
      IF (IC .GT. size(x)) THEN
         call realloc_cpoin('xy',100)
      ENDIF
      X(IC) = XC(1)
      Y(IC) = XC(2)

      END
