#! /usr/bin/env ksh

#  VERSION : 20.07.2000 14:15

script=`basename $0`
stty erase ^H

Usage="
This is a script to call the \"carre\" grid generator.
It makes standard links to the necessary files, calls \"carre\", calls the grid convertor
\"traduit\", and moves the resulting grid to the standard place with a new name.

Usage:

$script  { <stem> | - }

The input files are:

<stem>.inp      the configuration file for carre
<stem>.vrq      the equilibrium data in \"TdeV\" format
<stem>.str      the \"structures\" file
<stem>.fld      the product of R*Btor

If \"-\" is specified, then the input files are assumed to exist or to be created
via fcrr from dg output.

The script prints the output filename after successful grid conversion to B2 format.
The directories for the input files and for the grids can be specified in the
environmental variables CARRE_INPUTDIR and CARRE_GRIDDIR (default is the current directory).
If the variable CARRE_STOREDIR is set, then all the input data (i.e., the control file, the
equilibrium file, and the structures file) are saved in a directory 
\$CARRE_STOREDIR/\$DEVICE/<grid number>. If this directory does not exist, it is created.

Error messages and tracing data from carre (\"Grid\") and traduit (\"Convert\") can be found in
the files carre.log and traduit.log, respectively.
"
[ -z "$1" ] && { /bin/echo -e "$Usage"; exit 4; }

solpstop=`climb_and_look_for SOLPSTOP`
echo ${solpstop}
[ -s $solpstop ] && {
  SOLPSTOP="`cat $solpstop`"
}
echo ${SOLPSTOP}
[ "$SOLPS_DEBUG" = '' ] || {
  export EXT_DEBUG=".debug"
}
CARRE_PATH=$SOLPSTOP/modules/Carre/builds/$HOST_NAME.$COMPILER$EXT_DEBUG
/bin/echo -e "CARRE_PATH : $CARRE_PATH"
echo ${CARRE_PATH}
[ "$DEVICE" = '' ] && {
  print -u2 -n -- "No DEVICE selected. Please provide a device name\n "
  read u
  export DEVICE=$u
}
echo ${u}
[ "$SOLPS_CENTRAL" = 'yes' ] && DEVICE=$DEVICE/$USER
echo ${DEVICE}
echo ${USER}
# griddir=${CARRE_GRIDDIR-$SOLPSTOP/src/Sonnet/output/ascii/${Model_Class-iter}}
# griddir=${CARRE_GRIDDIR-$SOLPSTOP/src/Sonnet/output/ascii/${DEVICE-iter}}
export CARRE_TOPDIR=$SOLPSTOP/modules/Carre
dgdir=${CARRE_GRIDDIR-$DG/device/${DEVICE-iter}}
echo -e "dgdir ${dgdir}"
griddir=${CARRE_GRIDDIR-$SOLPSTOP/modules/Carre/meshes/${DEVICE-iter}}
echo ${griddir}
class=$DEVICE
echo ${class}
indir=${CARRE_STOREDIR-.}
echo -e ${indir}
stordir=$griddir
echo -e ${stordir}
[ -n "$CARRE_STOREDIR" ] && stordir="$CARRE_STOREDIR/${DEVICE-iter}"
grid_stem=$class.carre
endings="dgo equ str trg"
/bin/echo -e "Store directory: $stordir"
/bin/echo -e "Grid directory: $griddir"
/bin/echo -e "Input directory: $indir\n"

[ "$1" = '-' ] && {
    [ -r $indir/dg.str ] && {
      /bin/echo -e "Standard linking - the input files are assumed to exist in \"$indir\""
      q=p
      qqs=c
      grid_stem=`ls -ls $indir/dg.str | awk '{print $NF}' | xargs basename | sed 's:\.str$::'`
    } || {
      /bin/echo -e "Linking error - the input files were not found in \"$indir\""
      /bin/echo -e "Use (I)nput command to provide correct input directory"

echo -e "my test ${grid_stem}" 
      q=i
      qqs=c
    }
} || { \
    u="$indir/$1"
    [ -r $u.vrq ] && [ -r $u.str ] && [ -r $u.fld ] & { \
        ln -sf $u.vrq rzpsi.dat
        ln -sf $u.str structure.dat
        ln -sf $u.fld btor.dat
        ln -sf $u.inp carre.dat
        q=g
        qqs=s
    } || {
        /bin/echo -e "Files $u.vrq, $u.str, and $u.fld must be present!"
        exit 8
    }
}
while true
do {
  /bin/echo -e "Help, Prepare, Grid, Save, Convert, sTore, Next, Remove, Input, Output, Quit ? ($q)\c"
  while true; do {
    read u
    { case "${u:-$q}" in
    ( h|H )                                               # help:
            /bin/echo -e "
  Prepare (p)   apply fcrr to create Carre input files from DG output
  Grid    (g)   apply Carre to create a grid
  Save    (s)   save Carre output as the configuration file (carre.dat)
  Convert (c)   convert the Carre grid to the format suitable for B2 and DG
  Store   (t)   store the B2 grid in the storage directory.
                If CARRE_STOREDIR is set, the carre input files are also stored.
  Next    (n)   specify a new stem for the input files.
                If \"-\" is specified, then the Carre input files from the input directory
                are used. Otherwise, <stem>.vrq, <stem>.str, <stem>.fld, and <stem>.inp
                are used as the equilibrium, structures, toroidal field, and configuration
                files for Carre.
                This must be specified each time when you change the input directory.
  Remove  (r)   remove the specified B2 grid(s) from the storage directory.
                The list consists of the grid numbers (with leading zeros) separated by
                a white space.
                The stored input data (if any) for the specified grids are also removed.
  Input   (i)   specify a new directory for the input files (input directory).
                If the specified directory does not exist and the CARRE_STOREDIR is set,
                then the input directory is looked for in \$CARRE_STOREDIR/\$DEVICE 
                and \$CARRE_STOREDIR
  Output  (o)   specify a new storage directory for the grids
  Quit    (q)   quit $script
"; break;;
    ( p|P )                                               # prepare input from DG output:
            [ "$DEVICE" = '' ] && { [ -L $indir/dg.trg ] && { \
                class=`lln $indir/dg.trg`
		echo -e "${class}"
                class=${class%/*}
                class=${class##*/}
            } }
            [ "$class" = 'baserun' ] && {
                print -u2 -n -- "No DEVICE selected. Please provide a device name\n "
                read u
                export DEVICE=$u
                class=$DEVICE
            }
            griddir=${CARRE_GRIDDIR-$SOLPSTOP/modules/Carre/meshes/${DEVICE-iter}}
            [ -n "$CARRE_STOREDIR" ] && stordir="$CARRE_STOREDIR/$class"

            /bin/echo -e "class = $class\ngriddir = $griddir\nindir = $indir\ngrid_stem = $grid_stem"
            [ -n $class ] && {
              [ -r $class.aux ] && ln -sf $class.aux dg.aux
            }
            rm -f selptx.inf carre.dat structure.dat rzpsi.dat btor.dat 2>/dev/null
            $CARRE_PATH/fcrr.exe;
		read 
		q=g; break;;
    ( g|G )                                               # create the grid:
#            carre.exe; q=s; break;;
            $CARRE_PATH/carre.exe 2>carre.log; q=$qqs; break;;
    ( s|S )                                               # save the control data:
            cp carre.out carre.dat;
            /bin/echo -e "Saved grid settings in carre.dat file"
            q=c; break;;
    ( c|C )                                               # convert:
            /bin/echo -e "carre.out\n4" | $CARRE_PATH/traduit.exe 2>traduit.log; mv traduit.out traduit.sno ;
            /bin/echo -e "carre.out\n2" | $CARRE_PATH/traduit.exe 2>traduit.log; 
            q=t; break;;
    ( t|T )                                               # store the grid:
            [ -r traduit.out ] && {
                [ -d "$griddir" ] || {
                    /bin/echo -e "The directory \"$griddir\" does not exist. Create it (y/n)? \c"
                    read u; case "$u" in
                      ( y|Y )   /bin/echo -e mkdir "$griddir"
                      mkdir -p "$griddir" || break;;
                      (  *  )   /bin/echo -e break
                      break;;
                    esac
                }
                /bin/echo -e dir OK
                typeset -i n
                n=1
                set -- $griddir/$grid_stem.v[0-9][0-9][0-9].geo
                [ -f $1 ] && {
                    m=`ls $griddir/$grid_stem.v[0-9][0-9][0-9].geo | tail -1`
#		    m=`echo $griddir/$grid_stem.v[0-9][0-9][0-9].geo | awk '{print $NF}'`
                    m=${m#*/$grid_stem.v}
                    m=${m%.geo}
                    /bin/echo -e "Last grid number found is : $m"
                    n=`echo $m | sed -r -e 's:^0{1,}::'`
                    n=n+1
                    m=$n
                } || {
                    m=1
                }
                [ ${#m} -lt 2 ] && m=00$m || {
                    [ ${#m} -lt 3 ] && m=0$m
                }
                touch CARRE.HISTORY
		echo $user `date +%Y-%m-%d_%H:%M:%S` >> CARRE.HISTORY
		ls -ls dg.??? | cut -d ' ' -f 9- >> CARRE.HISTORY
                mv -f traduit.sno $dgdir/$grid_stem.v$m.sno && \
                  /bin/echo -e "The grid in DG format is stored as $dgdir/$grid_stem.v$m.sno"
                for ext in $endings; do
                  filename=`lln dg.$ext`
                  cp $filename $dgdir/`basename $filename`
                  /bin/echo -e "dg.$ext copied to $dgdir" && \
                  /bin/echo -e "dg.$ext copied to $dgdir" >> CARRE.HISTORY
                done
                modelname=`echo $filename | sed -e 's\trg\dg\' `
                cp $modelname $dgdir/`basename $modelname`
                /bin/echo -e "DG model `basename $modelname` copied to $dgdir" && \
                /bin/echo -e "DG model `basename $modelname` copied to $dgdir" >> CARRE.HISTORY
                mv -f traduit.out $griddir/$grid_stem.v$m.geo && \
                  /bin/echo -e "The grid in B2.5 format is stored as $griddir/$grid_stem.v$m.geo"
                [ -x ctrans ] && {
                  ctrans -d ps.mono gmeta > $griddir/$grid_stem.v$m.ps && \
                  /bin/echo -e "You can view the grid in PostScript format as $griddir/$grid_stem.v$m.ps"
                }
		            /bin/echo -e "The grid is stored as $griddir/$grid_stem.v$m".geo >> CARRE.HISTORY
                [ -n "$stordir" ] && {
                  [ -d "$stordir" ] || {
                    [ -a "$stordir" ] && {
                      /bin/echo -e "Name collision: there is already a file named $stordir"
                      /bin/echo -e "  ==> the directory cannot be created"
                    } || {
                      /bin/echo -e "The directory \"$stordir\" does not exist. Create it (y/n)? \c"
                      read u; case "$u" in
                        ( y|Y )   /bin/echo -e mkdir "$stordir"
                                  mkdir -p "$stordir";;
                        (  *  )   ;;
                      esac
                    }
                  }
                  [ -d "$stordir" ] && {
                    s="$stordir/$grid_stem.v$m"
                    u=y
                    [ -d "$s" ] && {
                      /bin/echo -e "The directory \"$s\" already exists. Use it (y/n)? \c"
                      read u; case "$u" in
                        ( y|Y )   ;;
                        (  *  )   u=;;
                      esac
                     }
                    [ -n "$u" ] && {
                      [ -d "$s" ] || mkdir -p "$s"
                      cp carre.dat structure.dat rzpsi.dat btor.dat "$s" && \
                              /bin/echo -e "carre.dat, structure.dat, rzpsi.dat, and btor.dat copied to $s" && \
                              /bin/echo -e "carre.dat, structure.dat, rzpsi.dat, and btor.dat copied to $s" >> CARRE.HISTORY
                    }
                  }
                }
                q=q; true
            } || { /bin/echo -e "No traduit.out. Convert the grid first."; q=c; }
                echo "=======================================================================================" >> CARRE.HISTORY
            break;;
    ( n|N )                                               # next job:
            /bin/echo -e "Input the new stem: \c"; read u
            [ -n "$u" ] && { 
              [ "$u" = '-' ] && {
                [ -r $indir/rzpsi.dat ] && [ -r $indir/structure.dat ] && [ -r $indir/btor.dat ] && {
                  ln -sf $indir/rzpsi.dat $indir/structure.dat $indir/btor.dat . && q=g
                  [ -r $indir/carre.dat ] && {
                    ln -sf $indir/carre.dat .
                    true
                  } || {
                    rm -f carre.dat 2>/dev/null
                    true
                  }
                } || {
                  print -- "If you specify \"-\" as the stem, the following files must be present in the input directory:"
                  print -- "    rzpsi.dat   structure.dat   btor.dat"
                }
              } || {
                u="$indir/$u"
                [ -r $u.vrq ] && [ -r $u.str ] && [ -r $u.fld ] & {
                  ln -sf $u.vrq rzpsi.dat
                  ln -sf $u.str structure.dat
                  ln -sf $u.fld btor.dat
                  ln -sf $u.inp carre.dat
                  q=g
                  true
                } || {
                  /bin/echo -e "Files $u.vrq, $u.str, and $u.fld must be present in the input directory"
                }
              }
            }; break;;
    ( r|R )                                               # remove the grid(s):
            /bin/echo -e "Input the list of grid numbers to be REMOVED:"; read u
            [ -n "$u" ] && {
                uu=
                vv=
                ww=
                for n in $u; do
                  uu="$uu $griddir/$grid_stem.v$n.geo"
                  vv="$vv $griddir/$grid_stem.v$n.ps"
                  ww="$ww $dgdir/$grid_stem.v$n.sno"
                done
                ls -l $uu $vv $ww
                /bin/echo -e "Do you wish to remove this grid(s)? (y/n): \c"; read u
                case "$u" in
                  ( y|Y ) rm -f $uu $vv $ww
                          for f in $uu; do {
                            n=${f#$griddir/$grid_stem.v}
                            n=${n%.geo}
                            [ -d "$stordir/$grid_stem.v$n" ] && rm -r "$stordir/$grid_stem.v$n"
                          }; done ;;
                  (  *  ) ;;
                esac
            }; break;;
    ( i|I )                                               # input files:
            /bin/echo -e "Specify the new input directory: \c"; read u
            [ -n "$u" ] && {
              indir="$u"; /bin/echo -e "$indir"
              [ -d $u ] && {
                indir="$u"
              } || {
                [ -n "$stordir" ] && {
                  indir="$stordir/$u" 
                  [ -d "$indir" ] || {
                    indir="$CARRE_STOREDIR/$u"
                    [ -d "$indir" ] || indir=
                  }
                }
              }
              [ -n "$indir" ] && {
                /bin/echo -e "The input directory is now `(cd $indir && pwd)`"; q=n; true
                [ -r $u/dg.str ] && {
                  grid_stem=`ls -ls $u/dg.str | awk '{print $NF}' | xargs basename | sed 's:\.str$::'`
                  q=p
                } || {
                  /bin/echo -e "Cannot find dg.str file in $u"
                  q=i
                }
              } || {
                /bin/echo -e "Cannot find directory: $u"; q=i
              }
            }; break;;
    ( o|O )                                               # output directory:
            /bin/echo -e "Specify the new grid directory: \c"; read u
            [ -n "$u" ] && {
              [ -d $u ] && {
                griddir="$u"; /bin/echo -e "The grid directory is now $griddir"; q=t
              } || {
                /bin/echo -e "No such directory: $u\nCreate it? (y/n) \c"; read uu
                case "$uu" in
                  ( y|Y ) s=$u; ss=$u
                          while true; do
                            case "$s" in
                              ( */* ) w="${s%/*}"
                                      [ -z "$w" ] && {
                                        /bin/echo -e "Wrong directory specification: no $s"
                                        q=o; break 2
                                      }; s="$w"
                                      [ -d "$s" ] && break
                                      ss="$s $ss";;
                              (  *  ) break;;
                            esac
                          done
                          /bin/echo -e "Creating $ss"
                          mkdir -p $ss && {
                            griddir="$u"; q=t
                            /bin/echo -e "The grid directory is now $griddir"
                          } || {
                            /bin/echo -e "Unable to create $u"; q=o
                            /bin/echo -e "The grid directory is still $griddir"
                          };;
                  (  *  ) ;;
                esac
              }
            }; break;;
    ( q|Q )                                               # quit:
            break 2;;
    (  *  )
            /bin/echo -e 'Illegal response.'
            /bin/echo -e 'Please use letters capitalized in the list or press ENTER for default'
            continue;;
    esac;}
  }; done
}; done
stty sane

